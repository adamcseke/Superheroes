//
//  FightPresenter.swift
//  Superheroes
//
//  Created by Adam Cseke on 2022. 03. 14..
//  Copyright (c) 2022. levivig. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit

final class FightPresenter {

    // MARK: - Private properties -

    private unowned let view: FightViewInterface
    private let interactor: FightInteractorInterface
    private let wireframe: FightWireframeInterface
    
    private var isFavorite: Bool = false
    private var favorites: [Heroes] = []
    private var originalLifeOne: Double = 0.0
    private var originalLifeTwo: Double = 0.0
    private var heroOneLife: Double = 0.0
    private var heroTwoLife: Double = 0.0
    
    private var timerOne = Timer()
    private var timerTwo = Timer()
    
    // MARK: - Lifecycle -

    init(
        view: FightViewInterface,
        interactor: FightInteractorInterface,
        wireframe: FightWireframeInterface
    ) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
    }
    
    func viewWillAppear(animated: Bool) {
        view.reloadCollectionView()
    }
}

// MARK: - Extensions -

extension FightPresenter: FightPresenterInterface {
    func checkFighter(fighter: String) -> Bool {
        if favorites.contains(where: { $0.id == fighter}) {
            return true
        } else {
            return false
        }
    }
    
    func stopTimers() {
        timerOne.invalidate()
        timerTwo.invalidate()
    }
    
    func fightButtonTapped(heroOne: Heroes, heroTwo: Heroes) {
        
        originalLifeOne = heroOne.powerstats.healthPoint
        originalLifeTwo = heroTwo.powerstats.healthPoint
        
        heroOneLife = heroOne.powerstats.healthPoint
        heroTwoLife = heroTwo.powerstats.healthPoint
        
        timerOne = Timer.scheduledTimer(withTimeInterval: heroOne.powerstats.hitSpeed, repeats: true) { _ in
            self.heroTwoLife = (self.heroTwoLife - heroOne.powerstats.damage)
            self.view.setHeroTwoLife(life: self.heroTwoLife / self.originalLifeTwo)
            if self.heroTwoLife <= 0 {
                self.view.pushHeroTwoLife()
            }
        }
        
        timerTwo = Timer.scheduledTimer(withTimeInterval: heroTwo.powerstats.hitSpeed, repeats: true) { _ in
            self.heroOneLife = (self.heroOneLife - heroTwo.powerstats.damage)
            self.view.setHeroOneLife(life: self.heroOneLife / self.originalLifeOne)
            if self.heroOneLife <= 0 {
                self.view.pushHeroOneLife()
            }
        }
        
        RunLoop.current.add(timerOne, forMode: .common)
        RunLoop.current.add(timerTwo, forMode: .common)

        print("Heroes: \(heroOne.name) - \(heroOneLife) - Damage: \(heroOne.powerstats.damage), \(heroTwo.name) - \(heroTwoLife) - Damage: \(heroTwo.powerstats.damage)")
    }
    
    func setSelectedHero(hero: Heroes) {
        view.setSelectedFighter(hero: hero)
    }
    
    func setHeroes() {
        view.pushFavoriteHeroes(heroes: favorites)
    }
    
    func numberOfSections() -> Int {
        1
    }
    
    func numberOfItem(in section: Int) -> Int {
        favorites.count
    }
    
    func cellForItem(at indexPath: IndexPath) -> Heroes {
        return favorites[indexPath.row]
    }
    
    func getFavorites() {
        favorites = DatabaseManager.main.getHeroes()
    }
}
