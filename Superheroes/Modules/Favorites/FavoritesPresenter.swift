//
//  FavoritesPresenter.swift
//  Superheroes
//
//  Created by Adam Cseke on 2022. 03. 02..
//  Copyright (c) 2022. levivig. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import Foundation

final class FavoritesPresenter {
    
    // MARK: - Private properties -
    
    private unowned let view: FavoritesViewInterface
    private let interactor: FavoritesInteractorInterface
    private let wireframe: FavoritesWireframeInterface
    
    private var favorites: [Heroes] = []
    private var isFavorite: Bool = false
    // MARK: - Lifecycle -
    
    init(
        view: FavoritesViewInterface,
        interactor: FavoritesInteractorInterface,
        wireframe: FavoritesWireframeInterface
    ) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
    }
    
    func viewWillAppear(animated: Bool) {
        view.reloadCollectionView()
    }
}

// MARK: - Extensions -

extension FavoritesPresenter: FavoritesPresenterInterface {
    
    func searchButtonTapped(name: String) {
        if name.isEmpty {
            favorites = DatabaseManager.main.getHeroes()
        } else {
            favorites.removeAll()
            DatabaseManager.main.getHeroes().forEach { heroes in
                if heroes.name.lowercased().contains(name.lowercased()) {
                    favorites.append(heroes)
                }
            }
        }
    }
    
    func pushToDetails(hero: Heroes) {
        wireframe.pushToDetails(hero: hero)
    }
    
    func numberOfSections() -> Int {
        1
    }
    
    func numberOfItem(in section: Int) -> Int {
        favorites.count
    }
    
    func cellForItem(at indexPath: IndexPath) -> Heroes {
        return favorites[indexPath.row]
    }
    
    func getFavorites() {
        favorites = DatabaseManager.main.getHeroes()
    }
    
    func favoritesButtonTapped(indexPath: IndexPath) {
        favorites[indexPath.row].isFavorite.toggle()
        isFavorite = interactor.isInTheFavorites(entity: favorites[indexPath.row])
        var newFavorites: [Heroes] = []
        favorites.forEach { hero in
            if hero.isFavorite == true {
                newFavorites.append(hero)
            }
        }
        
        if self.isFavorite {
            interactor.delete(entity: favorites[indexPath.row]) { _ in
                self.isFavorite = false
            }
        } else {
            interactor.insert(entity: favorites[indexPath.row]) { _ in
                self.isFavorite = true
            }
        }
    }
}
